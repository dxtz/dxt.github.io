<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>冷树叶</title>
  <subtitle>知而不行 是为不知</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://dengxiaoting.com/"/>
  <updated>2017-06-05T05:56:33.000Z</updated>
  <id>http://dengxiaoting.com/</id>
  
  <author>
    <name>xiaoting</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nginx-http</title>
    <link href="http://dengxiaoting.com/article/nginx-http/"/>
    <id>http://dengxiaoting.com/article/nginx-http/</id>
    <published>2017-06-05T05:56:33.000Z</published>
    <updated>2017-06-05T05:56:33.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hello-summer</title>
    <link href="http://dengxiaoting.com/article/hello-summer/"/>
    <id>http://dengxiaoting.com/article/hello-summer/</id>
    <published>2017-05-31T23:02:26.000Z</published>
    <updated>2017-06-05T05:29:33.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="随笔" scheme="http://dengxiaoting.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="记录" scheme="http://dengxiaoting.com/tags/%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>post-1</title>
    <link href="http://dengxiaoting.com/article/post-1/"/>
    <id>http://dengxiaoting.com/article/post-1/</id>
    <published>2017-05-27T02:52:49.000Z</published>
    <updated>2017-06-05T05:55:59.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">'hello world'</span>)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class
    
    </summary>
    
      <category term="随笔" scheme="http://dengxiaoting.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="php" scheme="http://dengxiaoting.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>一直在路上</title>
    <link href="http://dengxiaoting.com/article/dxtz-php-framework/"/>
    <id>http://dengxiaoting.com/article/dxtz-php-framework/</id>
    <published>2017-05-23T19:48:19.000Z</published>
    <updated>2017-06-05T05:28:57.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="随笔" scheme="http://dengxiaoting.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="php" scheme="http://dengxiaoting.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Composer介绍</title>
    <link href="http://dengxiaoting.com/article/composer-packagist/"/>
    <id>http://dengxiaoting.com/article/composer-packagist/</id>
    <published>2017-05-20T05:04:05.000Z</published>
    <updated>2017-06-06T18:03:34.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Composer是PHP用来管理依赖(dependency) 关系的工具。你可以在自己的项目中声明所依赖的外部工具库(libraries)，Composer会帮你安装这些依赖的库文件。</p>
</blockquote>
<p>在<a href="http://dengxiaoting.com/article/php-psr">PHP的最佳实践</a>这篇文章中提到过PHP-FIG（PHP框架可互用小组的简称）和PSR标准。Composer的出现与PSR-4（自动加载标准）以及PHP5.3之后提出的命名空间密不可分。Composer与NodeJS的NPM、Ruby的GEM类似的包管理工具。一些大家熟知的PHP框架如Laravel、Symfony、CodeIgniter、Yii2、ThinkPHP5 …都基于Composer或者支持Composer。有了Composer，完全可以打造自己个性化需求的PHP框架。<br><a id="more"></a></p>
<h4 id="安装Composer"><a href="#安装Composer" class="headerlink" title="安装Composer"></a>安装Composer</h4><p>简单介绍一下Mac下面的安装，在终端执行如下命令：<br><figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">brew</span> install composer</div></pre></td></tr></table></figure></p>
<p>安装完成后执行：<br><figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer</div></pre></td></tr></table></figure></p>
<p>出现如下所示信息，即安装成功。<br><img src="http://o7yzbeo2l.bkt.clouddn.com/composer2.jpg" alt="composer"><br>如果安装不成功，可以参见<strong><a href="https://pkg.phpcomposer.com/#how-to-install-composer" target="_blank" rel="external">这里</a></strong>，Windows也可照此方法安装。</p>
<h4 id="如何启用镜像服务"><a href="#如何启用镜像服务" class="headerlink" title="如何启用镜像服务"></a>如何启用镜像服务</h4><p>启用镜像服务，就不赘述了。参照这里：<strong><a href="https://pkg.phpcomposer.com/" target="_blank" rel="external">Packagist 镜像使用方法</a></strong>，应该可以轻松搞定。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Composer是PHP用来管理依赖(dependency) 关系的工具。你可以在自己的项目中声明所依赖的外部工具库(libraries)，Composer会帮你安装这些依赖的库文件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在&lt;a href=&quot;http://dengxiaoting.com/article/php-psr&quot;&gt;PHP的最佳实践&lt;/a&gt;这篇文章中提到过PHP-FIG（PHP框架可互用小组的简称）和PSR标准。Composer的出现与PSR-4（自动加载标准）以及PHP5.3之后提出的命名空间密不可分。Composer与NodeJS的NPM、Ruby的GEM类似的包管理工具。一些大家熟知的PHP框架如Laravel、Symfony、CodeIgniter、Yii2、ThinkPHP5 …都基于Composer或者支持Composer。有了Composer，完全可以打造自己个性化需求的PHP框架。&lt;br&gt;
    
    </summary>
    
      <category term="工具" scheme="http://dengxiaoting.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="composer" scheme="http://dengxiaoting.com/tags/composer/"/>
    
  </entry>
  
  <entry>
    <title>HTTP协议学习笔记</title>
    <link href="http://dengxiaoting.com/article/web-http-socket/"/>
    <id>http://dengxiaoting.com/article/web-http-socket/</id>
    <published>2017-05-18T01:46:22.000Z</published>
    <updated>2017-06-05T12:18:48.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="随笔" scheme="http://dengxiaoting.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="Web" scheme="http://dengxiaoting.com/tags/Web/"/>
    
      <category term="HTTP" scheme="http://dengxiaoting.com/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>PHP的最佳实践</title>
    <link href="http://dengxiaoting.com/article/php-psr/"/>
    <id>http://dengxiaoting.com/article/php-psr/</id>
    <published>2017-05-16T03:44:01.000Z</published>
    <updated>2017-06-05T06:09:04.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><em>最佳实践（best practice）</em>，是一个管理学的概念，认为存在某种技术、方法、过程、活动或机制可以使生产或管理实践的结果达到最优，并减少出错的可能性。<br>最佳实践还常常被咨询公司、研究机构、政府机构和行业协会定义为：为持续有效的达到企业目标而采取的最成功的解决方案或解决问题的方法。<br>最佳实践常被用来作为一种强制行政标准以保证质量，其基础可以是自我评估和标杆管理。最佳实践是ISO 9000和ISO 14001认证的管理标准。<br>——摘自 <a href="https://zh.wikipedia.org/wiki/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5" target="_blank" rel="external">维基百科</a></p>
</blockquote>
<p>PHP生态系统是个名副其实的大熔炉，其中框架数量众多，不同框架的功能不尽相同，规范也自成体系，有各式各样的代码风格和实现方式，框架之间可能是完全无法沟通。<br><a id="more"></a><br>在实际工作中，当我们调查比较之后，选定一个框架开始开发自己的应用，在项目进行到一定阶段，出现了新的需求，但是此时的框架并没有解决此需求的功能。如果有别的框架实现了此功能，但是因为不同框架之间的限制，我们不能共享别人的代码。此时自己重新来实现此功能，使开发的效率非常低。</p>
<p>所以要让框架之间互通、共享库，就需要框架之间通过<strong>接口</strong>、<strong>自动加载机制</strong>和<strong>标准的风格</strong>等其他规范，让框架之间相互合作。所以要了解 <a href="#PSR">PSR</a>，这样PHP框架无需频繁解决相同的问题，它们可以遵守最佳实践的标准，使用共同的解决方案。</p>
<h4 id="什么是PSR"><a href="#什么是PSR" class="headerlink" title=" 什么是PSR "></a><strong> <span id="PSR">什么是PSR</span> </strong></h4><p>PSR是PHP Standards Recommendation（PHP推荐标准）的简称。它是PHP-FIG（PHP Framework Interop Group）制定的推荐规范。</p>
<p><strong> <a href="http://www.php-fig.org/psr/" target="_blank" rel="external">了解PSR</a> <small><a href="https://psr.phphub.org/" target="_blank" rel="external">中文版</a></small> </strong></p>
<p><code>--EOF--</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;最佳实践（best practice）&lt;/em&gt;，是一个管理学的概念，认为存在某种技术、方法、过程、活动或机制可以使生产或管理实践的结果达到最优，并减少出错的可能性。&lt;br&gt;最佳实践还常常被咨询公司、研究机构、政府机构和行业协会定义为：为持续有效的达到企业目标而采取的最成功的解决方案或解决问题的方法。&lt;br&gt;最佳实践常被用来作为一种强制行政标准以保证质量，其基础可以是自我评估和标杆管理。最佳实践是ISO 9000和ISO 14001认证的管理标准。&lt;br&gt;——摘自 &lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;维基百科&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;PHP生态系统是个名副其实的大熔炉，其中框架数量众多，不同框架的功能不尽相同，规范也自成体系，有各式各样的代码风格和实现方式，框架之间可能是完全无法沟通。&lt;br&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://dengxiaoting.com/categories/PHP/"/>
    
    
      <category term="php最佳实践" scheme="http://dengxiaoting.com/tags/php%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
</feed>
